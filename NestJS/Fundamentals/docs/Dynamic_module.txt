+ Dynamic modules trong NestJS là một tính năng cho phép bạn cấu hình module một cách linh hoạt tại thời điểm runtime, thay vì phải định nghĩa tất cả các thông tin cần thiết trước đó. Điều này rất hữu ích khi bạn cần một module có thể thay đổi hành vi dựa trên các tham số cấu hình khác nhau.
+ Hầu hết các ví dụ về mã ứng dụng trong các phần trước đều sử dụng các mô-đun thông thường hoặc tĩnh. Mô-đun xác định các nhóm thành phần như providers and controllers phù hợp với nhau như một phần mô-đun của một ứng dụng tổng thể. Chúng cung cấp bối cảnh thực thi hoặc phạm vi cho các thành phần này. 
Ví dụ: các providers được xác định trong một mô-đun sẽ hiển thị với các thành viên khác của mô-đun mà không cần xuất chúng. Khi một provider cần hiển thị bên ngoài một mô-đun, trước tiên nó sẽ được xuất từ mô-đun chủ của nó, sau đó được nhập vào mô-đun tiêu thụ của nó.

- Đầu tiên, định nghĩa một UsersModule để provide và export một UsersService. UsersModule là mô-đun chủ cho UsersService. 
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';

@Module({
  providers: [UsersService],
  exports: [UsersService]
})
export class UsersModule {}

- Tiếp theo, chúng ta sẽ định nghĩa AuthModule, import UsersModule, làm cho các providers đã export của UsersModule có sẵn bên trong AuthModule:

import { Module } from '@nestjs/common';
import { UsersModule } from 'src/users/users.module';
import { AuthService } from './auth.service';

@Module({
    imports: [UsersModule],
    providers: [AuthService],
    exports: [AuthService]
})
export class AuthModule {}

- Các cấu trúc này cho phép inject UsersService vào, chẳng hạn như AuthService được lưu trữ trong AuthModule:
import { Injectable } from "@nestjs/common";
import { UsersService } from "src/users/users.service";

@Injectable()
export class AuthService {
    constructor(private usersService: UsersService) {
        /*
            Implementation that makes use of this.usersService
        */
    }
}

- Gọi đây là ràng buộc mô-đun tĩnh. Tất cả thông tin Nest cần để kết nối các mô-đun với nhau đã được khai báo trong mô-đun chủ và mô-đun sử dụng. Hãy giải nén những gì đang xảy ra trong quá trình này. Nest cung cấp UsersService bên trong AuthModule bằng cách: 
1. Khởi tạo UsersModule, bao gồm nhập tạm thời các mô-đun khác mà chính UsersModule sử dụng và giải quyết tạm thời bất kỳ dependencies nào 
2. Khởi tạo AuthModule và làm cho providers đã exported của UsersModule có sẵn cho các thành phần trong AuthModule (giống như thể chúng đã được khai báo trong AuthModule). 
3. Inject một instance của UsersService vào trong AuthService.

+ Dynamic module use case:
- Với ràng buộc mô-đun tĩnh, không có cơ hội để mô-đun sử dụng ảnh hưởng đến cách các providers từ mô-đun chủ được định cấu hình. Vì sao vấn đề này? Hãy xem xét trường hợp chúng ta có một mô-đun mục đích chung cần hoạt động khác nhau trong các trường hợp sử dụng khác nhau. Điều này tương tự với khái niệm “plugin” trong nhiều hệ thống, trong đó một cơ sở chung yêu cầu một số cấu hình trước khi nó có thể được người tiêu dùng sử dụng. 
- Một ví dụ điển hình với Nest là mô-đun cấu hình. Nhiều ứng dụng thấy hữu ích khi ngoại hóa chi tiết cấu hình bằng cách sử dụng mô-đun cấu hình. Điều này giúp bạn dễ dàng thay đổi động cài đặt ứng dụng trong các lần triển khai khác nhau: ví dụ: cơ sở dữ liệu phát triển cho nhà phát triển, cơ sở dữ liệu dàn cho môi trường dàn / thử nghiệm, v.v. Bằng cách ủy quyền quản lý các tham số cấu hình cho mô-đun cấu hình, mã nguồn ứng dụng vẫn độc lập với các thông số cấu hình. 
- Thách thức là bản thân mô-đun cấu hình, vì nó chung chung (tương tự như “plugin”), cần được tùy chỉnh bởi mô-đun tiêu thụ của nó. Đây là lúc các mô-đun động phát huy tác dụng. Bằng cách sử dụng các tính năng của mô-đun động, chúng tôi có thể làm cho mô-đun cấu hình động để mô-đun tiêu thụ có thể sử dụng API để kiểm soát cách mô-đun cấu hình được tùy chỉnh tại thời điểm nó được nhập. 
- Nói cách khác, các mô-đun động cung cấp một API để nhập một mô-đun này vào một mô-đun khác và tùy chỉnh các thuộc tính và hành vi của mô-đun đó khi nó được nhập, trái ngược với việc sử dụng các ràng buộc tĩnh mà chúng ta đã thấy cho đến nay. 